package com.learning.estimator.persistencesd;

import com.learning.estimator.model.entities.UserGroup;
import com.learning.estimator.persistence.config.client.CorePersistenceConfigClientSide;
import com.learning.estimator.persistence.facade.client.PersistenceFacadeClientSide;
import com.learning.estimator.persistencesd.config.JpaPersistenceConfig;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * User group persistence tests
 *
 * @author rolea
 */
@RunWith(SpringRunner.class)
@ContextConfiguration(classes = {JpaPersistenceConfig.class, CorePersistenceConfigClientSide.class})
//refresh H2 after each test
@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
@ActiveProfiles(profiles = {"test"})
public class UserGroupPersistenceTest {

    @Rule
    public ExpectedException exception = ExpectedException.none();
    @Autowired
    private PersistenceFacadeClientSide facade;

    @Test
    public void testUserGroupPersistence() {
        UserGroup adminGroup = facade.saveUserGroup(new UserGroup("Admin group"));

        assertThat(adminGroup.getUserGroupId()).as("Id gets generated by save").isNotNull();
        assertThat(adminGroup).as("Test fetch by id").isEqualTo(facade.findUserGroup(adminGroup.getUserGroupId()))
                .as("Test fetch by name").isEqualTo(facade.findUserGroupByName(adminGroup.getUserGroupName()));

        for (int i = 0; i < 3; i++)
            facade.saveUserGroup(new UserGroup("Group" + i));

        List<UserGroup> allGroups = facade.findAllUserGroups();
        assertThat(allGroups.size()).as("All groups get fetched by findAll").isEqualTo(4);

        for (int i = 0; i < 2; i++)
            assertThat(facade.findUserGroups(i, 2).size()).as("All pages have a size of 2").isEqualTo(2);

        facade.deleteUserGroup(adminGroup.getUserGroupId());
        assertThat(facade.countUserGroups()).as("Groups count after one delete should be 3").isEqualTo(3);
        facade.deleteAllUserGroups();
        assertThat(facade.countUserGroups()).as("Groups count after one delete should be 3").isEqualTo(0);
    }

}
