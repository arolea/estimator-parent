package com.learning.estimator.persistencesd;

import com.learning.estimator.common.exceptions.persistence.EntityInConflictingStateException;
import com.learning.estimator.model.entities.*;
import com.learning.estimator.persistence.config.server.CorePersistenceConfigServerSide;
import com.learning.estimator.persistence.facade.server.PersistenceFacadeServerSide;
import com.learning.estimator.persistencesd.config.JpaPersistenceConfig;
import org.hibernate.LazyInitializationException;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.fail;

/**
 * Task persistence tests
 *
 * @author rolea
 */
@RunWith(SpringRunner.class)
@ContextConfiguration(classes = {JpaPersistenceConfig.class, CorePersistenceConfigServerSide.class})
//refresh H2 after each test
@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
@ActiveProfiles(profiles = {"test"})
public class TaskPersistenceTest {

    @Rule
    public ExpectedException exception = ExpectedException.none();
    @Autowired
    private PersistenceFacadeServerSide facade;

    @Test
    public void testTaskPersistence() {
        UserGroup adminGroup = facade.saveUserGroup(new UserGroup("Admin group"));
        User admin = facade.saveUser(new User("admin", "admin").withUserGroup(adminGroup).withUserRole(UserRole.ROLE_ADMIN));
        Project mainProject = facade.saveProject(new Project(adminGroup, "Main project", "Description"));
        Task mainTask = facade.saveTask(new Task(admin, mainProject, "Test", "Description", 1.0, 2.0, 3.0, 5.0));

        assertThat(mainTask.getTaskId()).as("Id gets generated by save").isNotNull();
        assertThat(mainTask).as("Test fetch by id").isEqualTo(facade.findTask(mainTask.getTaskId()));

        for (int i = 0; i < 3; i++)
            facade.saveTask(new Task(admin, mainProject, "Test" + i, "Description" + i, 1.0, 2.0, 3.0, 5.0));

        List<Task> allTasks = facade.findAllTasks();
        assertThat(allTasks.size()).as("All tasts get fetched by findAll").isEqualTo(4);
        //test eager fetch for find all ( note that user groups are not eagerly fetched )
        try {
            allTasks.forEach(task -> System.out.println(task.getUser().getUsername() + " -> " + task.getProject().getProjectName()));
        } catch (Exception e) {
            fail();
        }

        for (int i = 0; i < 2; i++) {
            assertThat(facade.findTasks(i, 2).size()).as("Page size is 2").isEqualTo(2);
            //test eager fetch for paging ( note that user groups are not eagerly fetched )
            try {
                facade.findTasks(i, 2).forEach(task -> System.out.println(task.getUser().getUsername() + " -> " + task.getProject().getProjectName()));
            } catch (Exception e) {
                fail();
            }
        }

        facade.deleteTask(mainTask.getTaskId());
        assertThat(facade.countTasks()).as("Project count after one delete should be 3").isEqualTo(3);
        facade.deleteAllTasks();
        assertThat(facade.countTasks()).as("Project count after one delete should be 3").isEqualTo(0);
    }

    @Test
    public void testTaskPaging() {
        UserGroup group1 = facade.saveUserGroup(new UserGroup("Group 1"));
        UserGroup group2 = facade.saveUserGroup(new UserGroup("Group 2"));

        User user1 = facade.saveUser(new User("user1", "password1").withUserGroup(group1).withUserRole(UserRole.ROLE_ADMIN));
        User user2 = facade.saveUser(new User("user2", "password2").withUserGroup(group2).withUserRole(UserRole.ROLE_ADMIN));
        User user3 = facade.saveUser(new User("user3", "password3").withUserGroup(group2).withUserRole(UserRole.ROLE_USER));

        Project project1 = facade.saveProject(new Project(group1, "Project 1", "Description 1"));
        Project project2 = facade.saveProject(new Project(group1, "Project 2", "Description 2"));
        Project project3 = facade.saveProject(new Project(group2, "project 3", "Description 3"));

		/*
         * Tasks for users :
		 * 		user1 : 30
		 * 		user2 : 20
		 * 		user3 : 10
		 * 
		 * Tasks for projects :
		 * 		project1 : 10
		 * 		project2 : 20
		 * 		project3 : 30
		 * 
		 * Task status :
		 * 		pending : 30
		 * 		done : 20
		 * 		in progress : 10
		 * 
		 */

        assertThat(facade.findAllProjectsForUser(user1.getUserId()).size()).as("There are two projects for user 1").isEqualTo(2);

        for (int i = 0; i < 10; i++)
            facade.saveTask(new Task(user1, project1, "Test", "Description", 1.0, 2.0, 3.0, 5.0));
        for (int i = 0; i < 10; i++)
            facade.saveTask(new Task(user1, project2, "Test", "Description", 1.0, 2.0, 3.0, 5.0));
        for (int i = 0; i < 10; i++) {
            Task task = new Task(user1, project3, "Test", "Description", 1.0, 2.0, 3.0, 5.0);
            task.setTaskStatus(TaskStatus.IN_PROGRESS);
            facade.saveTask(task);
        }

        for (int i = 0; i < 10; i++) {
            Task task = new Task(user2, project2, "Test", "Description", 1.0, 2.0, 3.0, 5.0);
            task.setTaskStatus(TaskStatus.DONE);
            facade.saveTask(task);
        }
        for (int i = 0; i < 10; i++) {
            Task task = new Task(user2, project3, "Test", "Description", 1.0, 2.0, 3.0, 5.0);
            task.setTaskStatus(TaskStatus.DONE);
            facade.saveTask(task);
        }

        for (int i = 0; i < 10; i++)
            facade.saveTask(new Task(user3, project3, "Test", "Description", 1.0, 2.0, 3.0, 5.0));

        //test fetch for users
        assertThat(facade.findAllTasksByUser(user1.getUserId()).size()).as("Test fetch by user").isEqualTo(30);
        assertThat(facade.findAllTasksByUser(user2.getUserId()).size()).as("Test fetch by user").isEqualTo(20);
        assertThat(facade.findAllTasksByUser(user3.getUserId()).size()).as("Test fetch by user").isEqualTo(10);

        //test eager fetch ( note that user groups are not eagerly fetched )
        try {
            facade.findAllTasksByUser(user1.getUserId()).forEach(task -> System.out.println(task.getUser().getUsername() + " -> " + task.getProject().getProjectName() + " -> " + task.getTaskStatus()));
        } catch (Exception e) {
            fail();
        }

        //test fetch for projects
        assertThat(facade.findAllTasksByProject(project1.getProjectId()).size()).as("Test fetch by project").isEqualTo(10);
        assertThat(facade.findAllTasksByProject(project2.getProjectId()).size()).as("Test fetch by project").isEqualTo(20);
        assertThat(facade.findAllTasksByProject(project3.getProjectId()).size()).as("Test fetch by project").isEqualTo(30);

        //test eager fetch ( note that user groups are not eagerly fetched )
        try {
            facade.findAllTasksByProject(project1.getProjectId()).forEach(task -> System.out.println(task.getUser().getUsername() + " -> " + task.getProject().getProjectName() + " -> " + task.getTaskStatus()));
        } catch (Exception e) {
            fail();
        }

        //test fetch for status
        assertThat(facade.findAllTasksByStatus(TaskStatus.DONE).size()).as("Test fetch by status").isEqualTo(20);
        assertThat(facade.findAllTasksByStatus(TaskStatus.IN_PROGRESS).size()).as("Test fetch by status").isEqualTo(10);
        assertThat(facade.findAllTasksByStatus(TaskStatus.PENDING).size()).as("Test fetch by status").isEqualTo(30);

        //test eager fetch ( note that user groups are not eagerly fetched )
        try {
            facade.findAllTasksByStatus(TaskStatus.IN_PROGRESS).forEach(task -> System.out.println(task.getUser().getUsername() + " -> " + task.getProject().getProjectName() + " -> " + task.getTaskStatus()));
        } catch (Exception e) {
            fail();
        }

        //test paging and fetch for user based query
        for (int i = 0; i < 15; i++) {
            assertThat(facade.findTasksByUser(user1.getUserId(), i, 2).size()).as("Page size is 2").isEqualTo(2);
            try {
                facade.findTasksByUser(user1.getUserId(), i, 2).forEach(task -> System.out.println(task.getUser().getUsername() + " -> " + task.getProject().getProjectName() + " -> " + task.getTaskStatus()));
            } catch (Exception e) {
                fail();
            }
        }

        //test paging and fetch for project based query
        for (int i = 0; i < 15; i++) {
            assertThat(facade.findTasksByProject(project3.getProjectId(), i, 2).size()).as("Page size is 2").isEqualTo(2);
            try {
                facade.findTasksByProject(project3.getProjectId(), i, 2).forEach(task -> System.out.println(task.getUser().getUsername() + " -> " + task.getProject().getProjectName() + " -> " + task.getTaskStatus()));
            } catch (Exception e) {
                fail();
            }
        }

        //test paging and fetch for task status based query
        for (int i = 0; i < 15; i++) {
            assertThat(facade.findTasksByStatus(TaskStatus.PENDING, i, 2).size()).as("Page size is 2").isEqualTo(2);
            try {
                facade.findTasksByStatus(TaskStatus.PENDING, i, 2).forEach(task -> System.out.println(task.getUser().getUsername() + " -> " + task.getProject().getProjectName() + " -> " + task.getTaskStatus()));
            } catch (Exception e) {
                fail();
            }
        }

        //test predicates
        List<Task> tasksByPredicate = facade.findAllTasksByPredicate(user1.getUserId(), null, null);
        assertThat(tasksByPredicate.size()).as("There are 30 tasks matching the predicate").isEqualTo(30);
        //test eager fetch for user and project
        try {
            tasksByPredicate.forEach(task -> System.out.println(task.getUser().getUsername() + " -> " + task.getProject().getProjectName() + " -> " + task.getTaskStatus()));
        } catch (Exception e) {
            fail();
        }
        //test lazy fetch for user groups via user
        try {
            tasksByPredicate.forEach(task -> System.out.println(task.getUser().getGroups()));
            fail();
        } catch (Exception e) {
            System.out.println("Lazy load error detected");
        }

        tasksByPredicate = facade.findAllTasksByPredicate(user1.getUserId(), project3.getProjectId(), null);
        assertThat(tasksByPredicate.size()).as("There are 10 taska matching the predicate").isEqualTo(10);
        //test compound criteria

        //test paging and eager fetch
        for (int i = 0; i < 5; i++) {
            assertThat(facade.findTasksByPredicate(user1.getUserId(), project3.getProjectId(), null, i, 2).size())
                    .as("Page size is 2").isEqualTo(2);
            try {
                facade.findTasksByPredicate(user1.getUserId(), project3.getProjectId(), null, i, 2).forEach(task -> System.out.println(task.getUser().getUsername() + " -> " + task.getProject().getProjectName() + " -> " + task.getTaskStatus()));
            } catch (Exception e) {
                fail();
            }
        }

        //test lazy fetch for paging
        try {
            facade.findTasksByPredicate(user1.getUserId(), project3.getProjectId(), null, 0, 2).forEach(task -> System.out.println(task.getUser().getGroups()));
            fail();
        } catch (Exception e) {
            System.out.println("Lazy load error detected");
        }

        assertThat(facade.findAllTasksByPredicate(user1.getUserId(), project3.getProjectId(), TaskStatus.IN_PROGRESS).size())
                .as("There are 10 tasks matching the criteria").isEqualTo(10);
        assertThat(facade.findAllTasksByPredicate(user1.getUserId(), project3.getProjectId(), TaskStatus.DONE).size())
                .as("There are 0 tasks matching the criteria").isEqualTo(0);
    }

    @Test
    public void testLazyLoadForUserGroupViaUser() {
        UserGroup adminGroup = facade.saveUserGroup(new UserGroup("Admin group"));
        User admin = facade.saveUser(new User("admin", "admin").withUserGroup(adminGroup).withUserRole(UserRole.ROLE_ADMIN));
        Project mainProject = facade.saveProject(new Project(adminGroup, "Main project", "Description"));
        Task mainTask = facade.saveTask(new Task(admin, mainProject, "Test", "Description", 1.0, 2.0, 3.0, 5.0));
        exception.expect(LazyInitializationException.class);
        System.out.println(facade.findTask(mainTask.getTaskId()).getUser().getGroups());
    }

    @Test
    public void testEagerlyLoadForUserGroupViaProject() {
        UserGroup adminGroup = facade.saveUserGroup(new UserGroup("Admin group"));
        User admin = facade.saveUser(new User("admin", "admin").withUserGroup(adminGroup).withUserRole(UserRole.ROLE_ADMIN));
        Project mainProject = facade.saveProject(new Project(adminGroup, "Main project", "Description"));
        Task mainTask = facade.saveTask(new Task(admin, mainProject, "Test", "Description", 1.0, 2.0, 3.0, 5.0));
        try {
            System.out.println(facade.findTask(mainTask.getTaskId()).getProject().getUserGroup());
        } catch (Exception e) {
            fail();
        }
    }

    @Test
    public void testConsistencyForTasks() {
        UserGroup adminGroup = facade.saveUserGroup(new UserGroup("Admin group"));
        User admin = facade.saveUser(new User("admin", "admin").withUserGroup(adminGroup).withUserRole(UserRole.ROLE_ADMIN));
        Project mainProject = facade.saveProject(new Project(adminGroup, "Main project", "Description"));
        facade.saveTask(new Task(admin, mainProject, "Test", "Description", 1.0, 2.0, 3.0, 5.0));

        //should not be able to delete users with associated tasks
        try {
            facade.deleteUser(admin.getUserId());
            fail();
        } catch (EntityInConflictingStateException e) {
            System.out.println("Exception caught");
        }

        //should not be able to delete projects with associated tasks
        try {
            facade.deleteProject(mainProject.getProjectId());
            fail();
        } catch (EntityInConflictingStateException e) {
            System.out.println("Exception caught");
        }
    }

    @Test
    public void testDetach() {
        UserGroup adminGroup = facade.saveUserGroup(new UserGroup("Admin group"));
        User admin = facade.saveUser(new User("admin", "admin").withUserGroup(adminGroup).withUserRole(UserRole.ROLE_ADMIN));
        Project mainProject = facade.saveProject(new Project(adminGroup, "Main project", "Description"));
        Task mainTask = facade.saveTask(new Task(admin, mainProject, "Test", "Description", 1.0, 2.0, 3.0, 5.0));

        assertThat(facade.countTasks()).as("Tasks count").isEqualTo(1);
        assertThat(facade.countUsers()).as("Users count").isEqualTo(1);
        assertThat(facade.countProjects()).as("Projects count").isEqualTo(1);
        assertThat(facade.countUserGroups()).as("Groups count").isEqualTo(1);

        facade.deleteTask(mainTask.getTaskId());

        assertThat(facade.countTasks()).as("Tasks count").isEqualTo(0);
        assertThat(facade.countUsers()).as("Users count").isEqualTo(1);
        assertThat(facade.countProjects()).as("Projects count").isEqualTo(1);
        assertThat(facade.countUserGroups()).as("Groups count").isEqualTo(1);

        facade.deleteUser(admin.getUserId());

        assertThat(facade.countTasks()).as("Tasks count").isEqualTo(0);
        assertThat(facade.countUsers()).as("Users count").isEqualTo(0);
        assertThat(facade.countProjects()).as("Projects count").isEqualTo(1);
        assertThat(facade.countUserGroups()).as("Groups count").isEqualTo(1);

        facade.deleteProject(mainProject.getProjectId());

        assertThat(facade.countTasks()).as("Tasks count").isEqualTo(0);
        assertThat(facade.countUsers()).as("Users count").isEqualTo(0);
        assertThat(facade.countProjects()).as("Projects count").isEqualTo(0);
        assertThat(facade.countUserGroups()).as("Groups count").isEqualTo(1);

        facade.deleteUserGroup(adminGroup.getUserGroupId());

        assertThat(facade.countTasks()).as("Tasks count").isEqualTo(0);
        assertThat(facade.countUsers()).as("Users count").isEqualTo(0);
        assertThat(facade.countProjects()).as("Projects count").isEqualTo(0);
        assertThat(facade.countUserGroups()).as("Groups count").isEqualTo(0);
    }

}
